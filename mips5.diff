diff --exclude '*~' -urN linux-5.9.9-orig/arch/mips/include/asm/mipsregs.h linux-5.9.9/arch/mips/include/asm/mipsregs.h
--- linux-5.9.9-orig/arch/mips/include/asm/mipsregs.h	2021-12-08 09:15:10.678841410 +0200
+++ linux-5.9.9/arch/mips/include/asm/mipsregs.h	2021-12-08 12:39:32.459858733 +0200
@@ -133,6 +133,26 @@
  */
 #define CP0_TX39_CACHE	$7
 
+/*
+ * TrendChip cache control register
+ */
+#define CP0_CCTL 		$20		/* Lexra Cache Control Register */
+
+/*
+ * Lexra Cache Control Register fields
+ */
+#define CCTL_DINVAL	   	0x00000001
+#define CCTL_IINVAL		0x00000002
+#define CCTL_ILOCK		0x0000000c
+#define CCTL_IRAMFILL4 	0x00000010
+#define CCTL_IRAMOFF	0x00000020
+
+#define CCTL_IMEMFILL4 	0x00000010
+#define CCTL_IMEMOFF	0x00000020
+#define CCTL_DWB		0x00000100
+#define CCTL_DWBINVAL	0x00000200
+#define CCTL_DMEMON 	0x00000400
+#define CCTL_DMEMOFF 	0x00000800
 
 /* Generic EntryLo bit definitions */
 #define ENTRYLO_G		(_ULCAST_(1) << 0)
@@ -1645,6 +1665,10 @@
 	: "Jr" (value), "i" (sel));					\
 } while (0)
 
+/* TrendChip cache control register */
+#define read_c0_cctl()		__read_32bit_c0_register($20, 0)
+#define write_c0_cctl(val)	__write_32bit_c0_register($20, 0, val)
+
 #define read_c0_index()		__read_32bit_c0_register($0, 0)
 #define write_c0_index(val)	__write_32bit_c0_register($0, 0, val)
 
@@ -1902,6 +1926,9 @@
 #define read_c0_taglo()		__read_32bit_c0_register($28, 0)
 #define write_c0_taglo(val)	__write_32bit_c0_register($28, 0, val)
 
+#define read_c0_idatalo()		__read_32bit_c0_register($28, 1)
+#define write_c0_idatalo(val)	__write_32bit_c0_register($28, 1, val)
+
 #define read_c0_dtaglo()	__read_32bit_c0_register($28, 2)
 #define write_c0_dtaglo(val)	__write_32bit_c0_register($28, 2, val)
 
@@ -1914,6 +1941,9 @@
 #define read_c0_taghi()		__read_32bit_c0_register($29, 0)
 #define write_c0_taghi(val)	__write_32bit_c0_register($29, 0, val)
 
+#define read_c0_idatahi()		__read_32bit_c0_register($29, 1)
+#define write_c0_idatahi(val)	__write_32bit_c0_register($29, 1, val)
+
 #define read_c0_errorepc()	__read_ulong_c0_register($30, 0)
 #define write_c0_errorepc(val)	__write_ulong_c0_register($30, 0, val)
 
diff --exclude '*~' -urN linux-5.9.9-orig/arch/mips/include/asm/pgtable-32.h linux-5.9.9/arch/mips/include/asm/pgtable-32.h
--- linux-5.9.9-orig/arch/mips/include/asm/pgtable-32.h	2021-12-08 09:15:10.710840883 +0200
+++ linux-5.9.9/arch/mips/include/asm/pgtable-32.h	2021-12-08 12:53:12.905233767 +0200
@@ -206,7 +206,7 @@
 
 #else
 
-#if defined(CONFIG_XPA)
+#if defined(CONFIG_XPA) || defined(CONFIG_CPU_TC3162)
 
 /* Swap entries must have VALID and GLOBAL bits cleared. */
 #define __swp_type(x)			(((x).val >> 4) & 0x1f)
diff --exclude '*~' -urN linux-5.9.9-orig/arch/mips/kernel/idle.c linux-5.9.9/arch/mips/kernel/idle.c
--- linux-5.9.9-orig/arch/mips/kernel/idle.c	2021-12-08 09:15:11.642825532 +0200
+++ linux-5.9.9/arch/mips/kernel/idle.c	2021-12-08 09:58:49.204589821 +0200
@@ -18,6 +18,9 @@
 #include <asm/cpu-type.h>
 #include <asm/idle.h>
 #include <asm/mipsregs.h>
+#ifdef TCSUPPORT_CPU_EN7512
+#include <asm/tc3162/tc3162.h>
+#endif
 
 /*
  * Not all of the MIPS CPUs have the "wait" instruction available. Moreover,
@@ -67,6 +70,17 @@
 	local_irq_enable();
 }
 
+#ifdef TCSUPPORT_CPU_EN7512
+void cpu_wait_en7512(void)
+{
+	volatile unsigned int ram_access = 0;
+	int cnt;
+
+	for (cnt = 0; cnt < 100; cnt++)
+		ram_access = VPint(0xA0000000); /* DRAM access */
+}
+#endif
+
 /*
  * The RM7000 variant has to handle erratum 38.	 The workaround is to not
  * have any pending stores when the WAIT instruction is executed.
@@ -215,6 +229,11 @@
 		cpu_wait = r4k_wait;
 		if (read_c0_config7() & MIPS_CONF7_WII)
 			cpu_wait = r4k_wait_irqoff;
+#ifdef TCSUPPORT_CPU_EN7512
+		if (isEN7512) {
+                    cpu_wait = cpu_wait_en7512;
+		}
+#endif
 		break;
 
 	case CPU_74K:
diff --exclude '*~' -urN linux-5.9.9-orig/arch/mips/kernel/mips-mt.c linux-5.9.9/arch/mips/kernel/mips-mt.c
--- linux-5.9.9-orig/arch/mips/kernel/mips-mt.c	2021-12-08 09:15:11.646825466 +0200
+++ linux-5.9.9/arch/mips/kernel/mips-mt.c	2021-12-08 14:08:13.718526150 +0200
@@ -119,11 +119,19 @@
 	local_irq_restore(flags);
 }
 
+static int mt_opt_es;
 static int mt_opt_rpsctl = -1;
 static int mt_opt_nblsu = -1;
 static int mt_opt_forceconfig7;
 static int mt_opt_config7 = -1;
 
+static int __init es_set(char *str)
+{
+	get_option(&str, &mt_opt_es);
+	return 1;
+}
+__setup("es=", es_set);
+
 static int __init rpsctl_set(char *str)
 {
 	get_option(&str, &mt_opt_rpsctl);
@@ -161,6 +169,13 @@
 	unsigned int oconfig7 = read_c0_config7();
 	unsigned int nconfig7 = oconfig7;
 
+        if (mt_opt_es >= 0) {
+		printk("34K sync es set to %d.\n", mt_opt_es);
+		if (mt_opt_es)
+			nconfig7 |= (1 << 8);
+		else
+			nconfig7 &= ~(1 << 8);
+	}
 	if (mt_opt_rpsctl >= 0) {
 		printk("34K return prediction stack override set to %d.\n",
 			mt_opt_rpsctl);
