diff --git a/arch/mips/Kbuild.platforms b/arch/mips/Kbuild.platforms
index 0ee0abb31..20480659f 100644
--- a/arch/mips/Kbuild.platforms
+++ b/arch/mips/Kbuild.platforms
@@ -38,7 +38,7 @@ platform-$(CONFIG_SNI_RM)		+= sni/
 platform-$(CONFIG_MACH_TX39XX)		+= txx9/
 platform-$(CONFIG_MACH_TX49XX)		+= txx9/
 platform-$(CONFIG_MACH_VR41XX)		+= vr41xx/
-platform-$(CONFIG_TC3262)		+= tc3162/
+platform-$(CONFIG_MIPS_TC3262)		+= tc3162/
 
 # include the platform specific files
 include $(patsubst %, $(srctree)/arch/mips/%/Platform, $(platform-y))
diff --git a/arch/mips/Kconfig b/arch/mips/Kconfig
index d085c11f2..0c21593a8 100644
--- a/arch/mips/Kconfig
+++ b/arch/mips/Kconfig
@@ -629,7 +629,7 @@ config MIPS_TC3262
 	select CEVT_R4K
 	select CSRC_R4K
 	select DMA_NONCOHERENT
-	select IRQ_CPU
+	# select IRQ_MIPS_CPU
 	# select HW_HAS_PCI
 	# select SWAP_IO_SPACE
 	select SYS_HAS_CPU_MIPS32_R1
diff --git a/arch/mips/include/asm/tc3162/irq.h b/arch/mips/include/asm/tc3162/irq.h
index 2768f1afe..4db3c9743 100644
--- a/arch/mips/include/asm/tc3162/irq.h
+++ b/arch/mips/include/asm/tc3162/irq.h
@@ -1,6 +1,10 @@
 #ifndef __ASM_MACH_MIPS_IRQ_H
 #define __ASM_MACH_MIPS_IRQ_H
 
+/* This is only required for kernel/cevt-r4k.c to compile, it defines
+   __weak get_c0_compare_int(), but the definition from timer2.c
+   will be "preferred". */
+#define MIPS_CPU_IRQ_BASE 0
 
 #ifdef CONFIG_MIPS_TC3262
 #define NR_IRQS 64
diff --git a/arch/mips/kernel/cpu-probe.c b/arch/mips/kernel/cpu-probe.c
index d391a2750..546f5551c 100644
--- a/arch/mips/kernel/cpu-probe.c
+++ b/arch/mips/kernel/cpu-probe.c
@@ -1390,7 +1390,8 @@ static inline void cpu_probe_legacy(struct cpuinfo_mips *c, unsigned int cpu)
 		break;
 	case PRID_IMP_TC3162:
 		c->cputype = CPU_R3000;
-		c->isa_level = MIPS_CPU_ISA_I;
+		// TODO: MIPS_CPU_ISA_I is not defined.
+		// c->isa_level = MIPS_CPU_ISA_I;
 		c->options = MIPS_CPU_TLB | MIPS_CPU_3K_CACHE |
 		             MIPS_CPU_NOFPUEX;
 		c->tlbsize = 32;
diff --git a/arch/mips/kernel/mips-mt-fpaff.c b/arch/mips/kernel/mips-mt-fpaff.c
index a072eb797..86f8ed832 100644
--- a/arch/mips/kernel/mips-mt-fpaff.c
+++ b/arch/mips/kernel/mips-mt-fpaff.c
@@ -76,9 +76,9 @@ asmlinkage long mipsmt_sys_sched_setaffinity(pid_t pid, unsigned int len,
 	if (copy_from_user(&new_mask, user_mask_ptr, sizeof(new_mask)))
 		return -EFAULT;
 
-
-#ifdef CONFIG_MIPS_MT_SMP
-#ifndef CONFIG_MIPS_MT_SMTC
+#if 0
+// #ifdef CONFIG_MIPS_MT_SMP
+/* TC3262 TODO. */
 	printk("\r\n\r\n%s new_mask origin value is %08x\r\n\r\n", __FUNCTION__, *new_mask);
 	if(*(unsigned long *)new_mask == 0x8)
 	{
@@ -92,10 +92,9 @@ asmlinkage long mipsmt_sys_sched_setaffinity(pid_t pid, unsigned int len,
 	{
 		*(unsigned long *)new_mask = 0x1;
 	}
-	
+
 	printk("\r\n\r\n%s new_mask changed value is %08x\r\n\r\n", __FUNCTION__, *new_mask);
 #endif
-#endif
 
 
 	get_online_cpus();
diff --git a/arch/mips/tc3162/Makefile b/arch/mips/tc3162/Makefile
old mode 100755
new mode 100644
diff --git a/arch/mips/tc3162/Platform b/arch/mips/tc3162/Platform
old mode 100755
new mode 100644
index 4e5082249..cab07770a
--- a/arch/mips/tc3162/Platform
+++ b/arch/mips/tc3162/Platform
@@ -1,8 +1,7 @@
 #
 # Ralink boards
 #
-platform-$(CONFIG_MIPS_TC3262)	+= ralink/ softfloat/
-cflags-$(CONFIG_MIPS_TC3262)	+= -I$(srctree)/arch/mips/include/asm/tc3162/
+cflags-$(CONFIG_MIPS_TC3262)	+= -I$(srctree)/arch/mips/include/asm/tc3162/ -Wno-error=unused-variable -Wno-error=format -Wno-error=int-conversion -Wno-error=unused-function
 ifneq ($(strip $(TCSUPPORT_FREE_BOOTBASE)),)
 load-$(CONFIG_MIPS_TC3262) += $(KERNEL_START_ADDR)
 else
diff --git a/arch/mips/tc3162/irq.c b/arch/mips/tc3162/irq.c
index 5292d8e7a..008380908 100644
--- a/arch/mips/tc3162/irq.c
+++ b/arch/mips/tc3162/irq.c
@@ -13,6 +13,7 @@
 #include <asm/io.h>
 #include <asm/irq.h>
 #include <asm/mipsregs.h>
+#include <asm/setup.h>
 #include <asm/tc3162/tc3162.h>
 #include <linux/sched.h>
 
@@ -34,12 +35,12 @@
 
 static DEFINE_SPINLOCK(tc3162_irq_lock);
 
-static inline void unmask_mips_mt_irq(unsigned int irq)
+static inline void unmask_mips_mt_irq(struct irq_data *d)
 {
 	unsigned int vpflags = dvpe();
 	int cpu_irq = 0;
 
-	if ((irq == SI_SWINT1_INT1) || (irq == SI_SWINT_INT1))  
+	if ((d->irq == SI_SWINT1_INT1) || (d->irq == SI_SWINT_INT1))
 		cpu_irq = 1;
 
 	set_c0_status(0x100 << cpu_irq);
@@ -47,12 +48,12 @@ static inline void unmask_mips_mt_irq(unsigned int irq)
 	evpe(vpflags);
 }
 
-static inline void mask_mips_mt_irq(unsigned int irq)
+static inline void mask_mips_mt_irq(struct irq_data *d)
 {
 	unsigned int vpflags = dvpe();
 	int cpu_irq = 0;
 
-	if ((irq == SI_SWINT1_INT1) || (irq == SI_SWINT_INT1))  
+	if ((d->irq == SI_SWINT1_INT1) || (d->irq == SI_SWINT_INT1))
 		cpu_irq = 1;
 
 	clear_c0_status(0x100 << cpu_irq);
@@ -60,30 +61,31 @@ static inline void mask_mips_mt_irq(unsigned int irq)
 	evpe(vpflags);
 }
 
-static unsigned int mips_mt_cpu_irq_startup(unsigned int irq)
+static unsigned int mips_mt_cpu_irq_startup(struct irq_data *d)
 {
+	unsigned int irq = d->irq;
 	unsigned int vpflags = dvpe();
 	unsigned long int tmp;
 	int cpu_irq = 0;
 
-	if ((irq == SI_SWINT1_INT1) || (irq == SI_SWINT_INT1))  
+	if ((irq == SI_SWINT1_INT1) || (irq == SI_SWINT_INT1))
 		cpu_irq = 1;
 #ifdef TCSUPPORT_MT7510_E1
 	READ_E1(CR_INTC_IMR);
 #endif
 	tmp = regRead32(CR_INTC_IMR);
-	tmp |= (1 << (irq-1));
+	tmp |= (1 << (irq - 1));
 
-	if (irq == SI_SWINT_INT0){
+	if (irq == SI_SWINT_INT0) {
 		tmp |= (1 << (SI_SWINT1_INT0-1));
-	}else if (irq == SI_SWINT_INT1){
+	} else if (irq == SI_SWINT_INT1) {
 		tmp |= (1 << (SI_SWINT1_INT1-1));
 	}
 	regWrite32(CR_INTC_IMR, tmp);
 
 	clear_c0_cause(0x100 << cpu_irq);
 	evpe(vpflags);
-	unmask_mips_mt_irq(irq);
+	unmask_mips_mt_irq(d);
 
 	return 0;
 }
@@ -92,36 +94,76 @@ static unsigned int mips_mt_cpu_irq_startup(unsigned int irq)
  * While we ack the interrupt interrupts are disabled and thus we don't need
  * to deal with concurrency issues.  Same for mips_cpu_irq_end.
  */
-static void mips_mt_cpu_irq_ack(unsigned int irq)
+static void mips_mt_cpu_irq_ack(struct irq_data *d)
 {
 	unsigned int vpflags = dvpe();
 	int cpu_irq = 0;
 
-	if ((irq == SI_SWINT1_INT1) || (irq == SI_SWINT_INT1))  
+	if ((d->irq == SI_SWINT1_INT1) || (d->irq == SI_SWINT_INT1))
 		cpu_irq = 1;
 
 	clear_c0_cause(0x100 << cpu_irq);
 	evpe(vpflags);
-	mask_mips_mt_irq(irq);
+	mask_mips_mt_irq(d);
+}
+
+void tc3162_mt_send_ipi(unsigned int irq, unsigned int cpu)
+{
+	unsigned long flags;
+	int vpflags;
+	int cpu_irq = 0;
+
+	local_irq_save(flags);
+
+	/* We can only send IPIs to VPEs within the local core */
+	WARN_ON(!cpus_are_siblings(smp_processor_id(), cpu));
+
+	/* See how MIPS_CPU_IPI_CALL_IRQ and RESCHED interrupts
+	   defined in malta-smp.
+	   MIPS_CPU_IPI_CALL_IRQ = SI_SWINT_INT1. */
+	if ((irq == SI_SWINT1_INT1) || (irq == SI_SWINT_INT1))
+		cpu_irq = 1;
+
+	vpflags = dvpe();
+	settc(cpu_vpe_id(&cpu_data[cpu]));
+	write_vpe_c0_cause(read_vpe_c0_cause() | (C_SW0 << cpu_irq));
+	evpe(vpflags);
+
+	local_irq_restore(flags);
+}
+
+/* GENERIC_IRQ_CHIP does something similar but with assumption that
+   SW interrupts begin from 0.
+   TC3262 SW interrupts begin from 2 and from 7.
+
+   TODO: Looking at malta-smp.c, the handlers assigned only to
+   SI_SWINT1_INT1 and _INT0 interrupts. If irqdomain can map
+   irq -> hwirq, 7 -> 0, then may be generic chip can be used.
+
+   A slightly modified mips_mt_send_ipi from GENERIC_IRQ_CHIP. */
+static void mips_mt_send_ipi(struct irq_data *d, unsigned int cpu)
+{
+	tc3162_mt_send_ipi(d->irq, cpu);
 }
 
 static struct irq_chip mips_mt_cpu_irq_controller = {
 	.name		= "MIPS",
-	.startup	= mips_mt_cpu_irq_startup,
-	.ack		= mips_mt_cpu_irq_ack,
-	.mask		= mask_mips_mt_irq,
-	.mask_ack	= mips_mt_cpu_irq_ack,
-	.unmask		= unmask_mips_mt_irq,
-	.eoi		= unmask_mips_mt_irq,
+	.irq_startup	= mips_mt_cpu_irq_startup,
+	.irq_ack	= mips_mt_cpu_irq_ack,
+	.irq_mask	= mask_mips_mt_irq,
+	.irq_mask_ack	= mips_mt_cpu_irq_ack,
+	.irq_unmask	= unmask_mips_mt_irq,
+	.irq_eoi	= unmask_mips_mt_irq,
+	.ipi_send_single = mips_mt_send_ipi
 };
 
 #define __BUILD_IRQ_DISPATCH(irq_n) \
 static void __tc3262_irq_dispatch##irq_n(void) \
 {								\
 	do_IRQ(irq_n);				\
-}	
+}
 
-#define __BUILD_IRQ_DISPATCH_FUNC(irq_n)  __tc3262_irq_dispatch##irq_n 
+#define __BUILD_IRQ_DISPATCH_FUNC(irq_n)  __tc3262_irq_dispatch##irq_n
 
 /* pre-built 64 irq dispatch function */
 __BUILD_IRQ_DISPATCH(0)
@@ -260,8 +302,9 @@ __BUILD_IRQ_DISPATCH_FUNC(63)
 
 #endif
 
-__IMEM static inline void unmask_mips_irq(unsigned int irq)
+static inline void unmask_mips_irq(struct irq_data *d)
 {
+	unsigned int irq = d->irq;
 #ifdef CONFIG_MIPS_TC3262
 	unsigned long flags;
 	unsigned long int tmp;
@@ -300,19 +343,16 @@ __IMEM static inline void unmask_mips_irq(unsigned int irq)
 #endif
 }
 
-__IMEM static inline void mask_mips_irq(unsigned int irq)
+static inline void mask_mips_irq(struct irq_data *d)
 {
+	unsigned int irq = d->irq;
 #ifdef CONFIG_MIPS_TC3262
 	unsigned long flags;
 	unsigned long int tmp;
 	int cpu = smp_processor_id();
 
 	spin_lock_irqsave(&tc3162_irq_lock, flags);
-#ifdef CONFIG_MIPS_MT_SMTC
-	if (cpu_data[cpu].vpe_id != 0) {
-#else
 	if (cpu != 0) {
-#endif
 		if (irq == SI_TIMER_INT)
 			irq = SI_TIMER1_INT;
 	}
@@ -396,29 +436,23 @@ void tc3162_disable_irq(unsigned int irq)
 }
 EXPORT_SYMBOL(tc3162_disable_irq);
 
-#ifdef CONFIG_MIPS_MT_SMP
-#ifndef CONFIG_MIPS_MT_SMTC
+// #ifdef CONFIG_MIPS_MT_SMP
+#if 0
 extern int plat_set_irq_affinity(unsigned int irq,
 				  const struct cpumask *affinity);
 #endif
-#endif
 
 static struct irq_chip tc3162_irq_chip = {
 	.name		= "MIPS",
-	.ack		= mask_mips_irq,
-	.mask		= mask_mips_irq,
-	.mask_ack	= mask_mips_irq,
-	.unmask		= unmask_mips_irq,
-	.eoi		= unmask_mips_irq,
-#ifdef CONFIG_MIPS_MT_SMTC_IRQAFF 
+	.irq_ack	= mask_mips_irq,
+	.irq_mask	= mask_mips_irq,
+	.irq_mask_ack	= mask_mips_irq,
+	.irq_unmask	= unmask_mips_irq,
+	.irq_eoi        = unmask_mips_irq,
+// #ifndef CONFIG_MIPS_MT_SMP
+#if 0
 	.set_affinity	= plat_set_irq_affinity,
-#else
-#ifdef CONFIG_MIPS_MT_SMP
-#ifndef CONFIG_MIPS_MT_SMTC
-	.set_affinity	= plat_set_irq_affinity,
-#endif
 #endif
-#endif /* CONFIG_MIPS_MT_SMTC_IRQAFF */
 };
 
 extern void vsmp_int_init(void);
@@ -435,28 +469,28 @@ void __init arch_init_irq(void)
 	for (i = 0; i < NR_IRQS; i++) {
 #ifdef CONFIG_MIPS_TC3262
 		//TCSUPPORT_CPU_MT7505
-		#if defined(CONFIG_MIPS_MT_SMP) || defined(CONFIG_MIPS_MT_SMTC)
+		#if defined(CONFIG_MIPS_MT_SMP)
 		/*
 	 	 * Only MT is using the software interrupts currently, so we just
 	 	 * leave them uninitialized for other processors.
 	 	 */
 		if (cpu_has_mipsmt) {
 			if ((i == SI_SWINT1_INT0) || (i == SI_SWINT1_INT1) ||
-				(i == SI_SWINT_INT0) || (i == SI_SWINT_INT1)) { 
-				set_irq_chip(i, &mips_mt_cpu_irq_controller);
+				(i == SI_SWINT_INT0) || (i == SI_SWINT_INT1)) {
+				irq_set_chip(i, &mips_mt_cpu_irq_controller);
 				continue;
 			}
 		}
 
 		if ((i == SI_TIMER_INT) || (i == SI_TIMER1_INT))
-			set_irq_chip_and_handler(i, &tc3162_irq_chip,
+			irq_set_chip_and_handler(i, &tc3162_irq_chip,
 					 handle_percpu_irq);
 		else
 		#endif
-			set_irq_chip_and_handler(i, &tc3162_irq_chip,
+			irq_set_chip_and_handler(i, &tc3162_irq_chip,
 					 handle_level_irq);
 #else
-		set_irq_chip_and_handler(i, &tc3162_irq_chip,
+		irq_set_chip_and_handler(i, &tc3162_irq_chip,
 					 handle_level_irq);
 #endif
 	}
@@ -464,7 +498,7 @@ void __init arch_init_irq(void)
 #ifdef CONFIG_MIPS_TC3262
 	if (cpu_has_veic || cpu_has_vint) {
 		write_c0_status((read_c0_status() & ~ST0_IM ) |
-			                (STATUSF_IP0 | STATUSF_IP1)); 
+			                (STATUSF_IP0 | STATUSF_IP1));
 
 		/* register irq dispatch functions */
 		for (i = 0; i < NR_IRQS; i++)
@@ -481,7 +515,7 @@ void __init arch_init_irq(void)
 #endif
 }
 
-__IMEM asmlinkage void plat_irq_dispatch(void)
+asmlinkage void plat_irq_dispatch(void)
 {
 #ifdef CONFIG_MIPS_TC3262
 	int irq = ((read_c0_cause() & ST0_IM) >> 10);
diff --git a/arch/mips/tc3162/malta-smp.c b/arch/mips/tc3162/malta-smp.c
index af388ff1c..abc57628e 100644
--- a/arch/mips/tc3162/malta-smp.c
+++ b/arch/mips/tc3162/malta-smp.c
@@ -19,8 +19,10 @@
  *  59 Temple Place - Suite 330, Boston MA 02111-1307, USA.
  *
  */
+#include <linux/sched.h>
 #include <linux/smp.h>
 #include <linux/interrupt.h>
+#include <asm/setup.h>
 
 #include <asm/tc3162/tc3162.h>
 
@@ -29,61 +31,86 @@
 #define MIPS_CPU_IPI_RESCHED_IRQ 	SI_SWINT_INT0		/* SW int 0 for resched */
 #define MIPS_CPU_IPI_CALL_IRQ 		SI_SWINT_INT1		/* SW int 1 for call */
 
-
 static void ipi_resched_dispatch(void)
 {
-	//printk("ipi_resched_dispatch\n");
 	do_IRQ(MIPS_CPU_IPI_RESCHED_IRQ);
 }
 
 static void ipi_call_dispatch(void)
 {
-	//printk("ipi_call_dispatch\n");
 	do_IRQ(MIPS_CPU_IPI_CALL_IRQ);
 }
 
+/* See smp.c GENERIC_IRQ_IPI. */
 static irqreturn_t ipi_resched_interrupt(int irq, void *dev_id)
 {
+	scheduler_ipi();
 	return IRQ_HANDLED;
 }
 
 static irqreturn_t ipi_call_interrupt(int irq, void *dev_id)
 {
-	smp_call_function_interrupt();
-
+	generic_smp_call_function_interrupt();
 	return IRQ_HANDLED;
 }
 
-static struct irqaction irq_resched = {
-	.handler	= ipi_resched_interrupt,
-	.flags		= IRQF_DISABLED | IRQF_PERCPU,
-	.name		= "IPI_resched"
-};
+/* The two functions will be assigned to vsmp_smp_ops, see
+   kernel/smp-mt.c. */
+void mips_smp_send_ipi_single(int cpu, unsigned int action)
+{
+	mips_smp_send_ipi_mask(cpumask_of(cpu), action);
+}
 
-static struct irqaction irq_call = {
-	.handler	= ipi_call_interrupt,
-	.flags		= IRQF_DISABLED | IRQF_PERCPU,
-	.name		= "IPI_call"
-};
+extern void tc3162_mt_send_ipi(unsigned int irq, unsigned int cpu);
 
-void __init arch_init_ipiirq(int irq, struct irqaction *action)
+void mips_smp_send_ipi_mask(const struct cpumask *mask, unsigned int action)
 {
-	setup_irq(irq, action);
-	set_irq_handler(irq, handle_percpu_irq);
+	unsigned int irq;
+	int cpu;
+
+	switch (action) {
+	case SMP_CALL_FUNCTION:
+		irq = MIPS_CPU_IPI_CALL_IRQ;
+		break;
+
+	case SMP_RESCHEDULE_YOURSELF:
+		irq = MIPS_CPU_IPI_RESCHED_IRQ;
+		break;
+
+	default:
+		BUG();
+	}
+
+	for_each_cpu(cpu, mask)
+		tc3162_mt_send_ipi(irq, cpu);
+}
+
+
+static void smp_ipi_init_one(unsigned int irq, const char *name,
+			     irq_handler_t handler)
+{
+	int ret;
+	irq_set_handler(irq, handle_percpu_irq);
+	ret = request_irq(irq, handler, IRQF_PERCPU, name, NULL);
+	BUG_ON(ret);
 }
 
 void __init vsmp_int_init(void)
 {
-	//printk("vsmp_int_init\n");
+	printk("vsmp_int_init.\n");
+
+	/* TODO: Why not set dispatch handlers in irq.c? */
 	set_vi_handler(MIPS_CPU_IPI_RESCHED_IRQ, ipi_resched_dispatch);
 	set_vi_handler(MIPS_CPU_IPI_CALL_IRQ, ipi_call_dispatch);
-	arch_init_ipiirq(MIPS_CPU_IPI_RESCHED_IRQ, &irq_resched);
-	arch_init_ipiirq(MIPS_CPU_IPI_CALL_IRQ, &irq_call);
+
+	smp_ipi_init_one(MIPS_CPU_IPI_RESCHED_IRQ, "IPI_resched", ipi_resched_interrupt);
+	smp_ipi_init_one(MIPS_CPU_IPI_CALL_IRQ, "IPI_call", ipi_call_interrupt);
 
 	VPint(CR_INTC_IMR) |=  (1 << (SI_SWINT1_INT0-1));
    	VPint(CR_INTC_IMR) |=  (1 << (SI_SWINT1_INT1-1));
 }
 
+#if 0
 int plat_set_irq_affinity(unsigned int irq, const struct cpumask *affinity)
 {
 	cpumask_t tmask;
@@ -108,7 +135,7 @@ int plat_set_irq_affinity(unsigned int irq, const struct cpumask *affinity)
 	{
 		*(unsigned long *)affinity = 0x1;
 	}
-	
+
 	printk("\r\n\r\n%s affinity changed value is %08x\r\n\r\n", __FUNCTION__, *affinity);
 #endif
 
@@ -138,19 +165,19 @@ int plat_set_irq_affinity(unsigned int irq, const struct cpumask *affinity)
 		{
 			cpu_clear(cpu, tmask);
 			printk("%s: cpu %d cpu_clear\r\n", __FUNCTION__, cpu);
-			
+
 		}
 		else {
 			printk("%s: cpu %d vpe_id %d \r\n", __FUNCTION__, cpu, cpu_data[cpu].vpe_id);
-#if 0			
+#if 0
 			if (cpu_data[cpu].vpe_id == 0)
 				irq_vpe0++;
-			else 
+			else
 				irq_vpe1++;
 #else
 			if(cpu == 0)
 				irq_vpe0++;
-			else 
+			else
 				irq_vpe1++;
 #endif
 		}
@@ -159,7 +186,7 @@ int plat_set_irq_affinity(unsigned int irq, const struct cpumask *affinity)
 	cpumask_copy(irq_desc[irq].affinity, &tmask);
 
 	printk("%s: irq_vpe0 %d irq_vpe1 %d \r\n", __FUNCTION__, irq_vpe0, irq_vpe1);
-	
+
 
 	/* change IRQ binding to VPE0 or VPE1 */
 	offset1= 32 - irq;
@@ -184,6 +211,7 @@ int plat_set_irq_affinity(unsigned int irq, const struct cpumask *affinity)
 	printk("%s: irq num %d \r\n", __FUNCTION__, irq);
 	return 0;
 }
+#endif
 
 #endif /* CONFIG_MIPS_MT_SMP */
 
diff --git a/arch/mips/tc3162/prom.c b/arch/mips/tc3162/prom.c
index 28047b556..c9e34be72 100644
--- a/arch/mips/tc3162/prom.c
+++ b/arch/mips/tc3162/prom.c
@@ -1,7 +1,8 @@
 #include <linux/init.h>
 #include <linux/mm.h>
 #include <linux/sched.h>
-#include <linux/bootmem.h>
+// TODO: No such file.
+// #include <linux/bootmem.h>
 #include <linux/blkdev.h>
 
 #include <asm/mipsmtregs.h>
@@ -315,7 +316,8 @@ void __init prom_init(void)
 	//mips_machtype = MACH_TRENDCHIP_TC3162;
 
 #ifdef CONFIG_MIPS_MT_SMP
-	register_smp_ops(&vsmp_smp_ops);
+	if (register_vsmp_smp_ops())
+		panic("Failed to register_vsmp_smp_ops()");
 #endif
     if(isEN751221)
 		cpu_dma_round_robin(ENABLE);
@@ -326,13 +328,13 @@ void __init prom_free_prom_memory(void)
 	/* We do not have any memory to free */
 }
 
-int prom_putchar(char data)
+void prom_putchar(char data)
 {
 	while (!(LSR_INDICATOR & LSR_THRE))
 		;
 	VPchar(CR_UART_THR) = data;
-	return 1;
 }
+
 EXPORT_SYMBOL(prom_putchar);
 
 char prom_getchar(void)
diff --git a/arch/mips/tc3162/time2.c b/arch/mips/tc3162/time2.c
index 8bad1335b..b644e6986 100644
--- a/arch/mips/tc3162/time2.c
+++ b/arch/mips/tc3162/time2.c
@@ -34,7 +34,7 @@
 #include <asm/div64.h>
 #include <asm/cpu.h>
 #include <asm/time.h>
-
+#include <asm/setup.h>
 #include <asm/tc3162/tc3162.h>
 
 unsigned long cpu_khz;
@@ -185,7 +185,7 @@ irqreturn_t mips_perf_interrupt(int irq, void *dev_id)
 
 static struct irqaction perf_irqaction = {
 	.handler = mips_perf_interrupt,
-	.flags = IRQF_DISABLED | IRQF_PERCPU,
+	.flags = IRQF_PERCPU,
 	.name = "performance",
 };
 extern struct clocksource clocksource_mips;
@@ -241,11 +241,6 @@ irqreturn_t watchdog_timer_interrupt(int irq, void *dev_id){
 	return real_watchdog_timer_interrupt(irq, dev_id);
 }
 #endif
-static struct irqaction watchdog_timer_irqaction = {
-	.handler = watchdog_timer_interrupt,
-	.flags = IRQF_DISABLED ,
-	.name = "watchdog",
-};
 
 static void watchdog_timer_dispatch(void)
 {
@@ -290,12 +285,6 @@ irqreturn_t bus_timeout_interrupt(int irq, void *dev_id)
 	return IRQ_HANDLED;
 }
 
-static struct irqaction bus_timeout_irqaction = {
-	.handler = bus_timeout_interrupt,
-	.flags = IRQF_DISABLED ,
-	.name = "bus timeout",
-};
-
 static void bus_timeout_dispatch(void)
 {
 	do_IRQ(BUS_TOUT_INT);
@@ -305,7 +294,8 @@ static void bus_timeout_dispatch(void)
    this will be called.
    c0_compare_interrupt will be set as the handler of returned
    interrupt.  */
-unsigned int __cpuinit get_c0_compare_int(void)
+/* TODO: May be set the timer somewhere else? */
+unsigned int get_c0_compare_int(void)
 {
 	if ((get_current_vpe()) && !vpe1_timer_installed) {
 		tc3162_enable_irq(SI_TIMER1_INT);
@@ -321,7 +311,7 @@ unsigned int __cpuinit get_c0_compare_int(void)
 	return mips_cpu_timer_irq;
 }
 
-static cycle_t cputmr_hpt_read(void)
+static u64 cputmr_hpt_read(void)
 {
 	return regRead32(cputmr_cnt[0]);
 }
@@ -346,9 +336,9 @@ static void __init cputmr_hpt_timer_init(void)
 
 static void cputmr_timer_ack(void)
 {
-#if defined(CONFIG_MIPS_MT_SMP) || defined(CONFIG_MIPS_MT_SMTC)
+#if defined(CONFIG_MIPS_MT_SMP)
 	int cpu = smp_processor_id();
-	int vpe = cpu_data[cpu].vpe_id;
+	int vpe = cpu_vpe_id(&cpu_data[cpu]);
 #else
 	int cpu = 0;
 	int vpe = 0;
@@ -379,10 +369,11 @@ void __init tc3162_time_init(void)
 		regWrite32(CR_WDOG_THSLD, ((3 * TIMERTICKS_1S * SYS_HCLK) * 500)); // (3 * TIMERTICKS_1S * SYS_HCLK) * 1000 / 2
 		if (cpu_has_vint)
 			set_vi_handler(TIMER5_INT, watchdog_timer_dispatch);
-		setup_irq(TIMER5_INT, &watchdog_timer_irqaction);
+		if (request_irq(TIMER5_INT, watchdog_timer_interrupt, 0, "watchdog", NULL))
+			printk(KERN_ALERT "Filed to request watchdog interrupt.\n");
 
 		/* setup bus timeout interrupt */
-   		//VPint(CR_MON_TMR) |= ((1<<30) | (0xff));
+   		// VPint(CR_MON_TMR) |= ((1<<30) | (0xff));
 		if(isMT751020 || isMT7505 || isEN751221)
 		{
 			regWrite32(CR_MON_TMR, 0xcfffffff);
@@ -394,7 +385,8 @@ void __init tc3162_time_init(void)
 
 		if (cpu_has_vint)
 			set_vi_handler(BUS_TOUT_INT, bus_timeout_dispatch);
-		setup_irq(BUS_TOUT_INT, &bus_timeout_irqaction);
+		if (request_irq(BUS_TOUT_INT, bus_timeout_interrupt, 0, "bus timeout", NULL))
+			printk(KERN_ALERT "Filed to request bus timeout interrupt.\n");
 	}
 
 }
@@ -421,12 +413,14 @@ void __init plat_time_init(void)
 	   this. As I see, if this is not done, the timer
 	   will stop and clocksource.read will return the same
 	   value.
+
 	   Until this is done somehow, do not use preceission
 	   timer.
+
 	   c0_compare_interrupt will be triggered on SI_TIME_INT
 	   returned by get_c0_compare_int defined here.
-	   clocksource.read returns read_c0_count and I do not know
-	   what this will return in this case. TODO: */
+	   clocksource.read returns read_c0_count at the moment.
+	   TODO: */
 #if 0
 	if (isRT63165 || isRT63365 || isMT751020 || isMT7505 ||isEN751221) {
 
diff --git a/drivers/tty/serial/Kconfig b/drivers/tty/serial/Kconfig
index 1a7e84a0d..c6869d742 100644
--- a/drivers/tty/serial/Kconfig
+++ b/drivers/tty/serial/Kconfig
@@ -1583,6 +1583,15 @@ config SERIAL_MILBEAUT_USIO_CONSOLE
 	  receives all kernel messages and warnings and which allows logins in
 	  single user mode).
 
+config SERIAL_TC3162
+	bool "TC3162 UART"
+	select SERIAL_CORE
+	select SERIAL_CORE_CONSOLE
+	# select SERIAL_EARLYCON
+	default y
+	help
+	  Say 'Y' here if you wish to use TC3162 UART as the system console.
+	  
 endmenu
 
 config SERIAL_MCTRL_GPIO
diff --git a/drivers/tty/serial/Makefile b/drivers/tty/serial/Makefile
index caf167f0c..8d5a64979 100644
--- a/drivers/tty/serial/Makefile
+++ b/drivers/tty/serial/Makefile
@@ -90,9 +90,11 @@ obj-$(CONFIG_SERIAL_OWL)	+= owl-uart.o
 obj-$(CONFIG_SERIAL_RDA)	+= rda-uart.o
 obj-$(CONFIG_SERIAL_MILBEAUT_USIO) += milbeaut_usio.o
 obj-$(CONFIG_SERIAL_SIFIVE)	+= sifive.o
+obj-$(CONFIG_SERIAL_TC3162)	+= tc3162-serial.o
 
 # GPIOLIB helpers for modem control lines
 obj-$(CONFIG_SERIAL_MCTRL_GPIO)	+= serial_mctrl_gpio.o
 
 obj-$(CONFIG_SERIAL_KGDB_NMI) += kgdb_nmi.o
 obj-$(CONFIG_KGDB_SERIAL_CONSOLE) += kgdboc.o
+
diff --git a/drivers/tty/serial/tc3162-serial.c b/drivers/tty/serial/tc3162-serial.c
new file mode 100755
index 000000000..d6961d6af
--- /dev/null
+++ b/drivers/tty/serial/tc3162-serial.c
@@ -0,0 +1,422 @@
+/*
+ *	Serial driver for TC3162 SoC
+ */
+
+#include <linux/init.h>
+#include <linux/kernel.h>
+#include <linux/module.h>
+#include <linux/ioport.h>
+#include <linux/serial.h>
+#include <linux/serial_core.h>
+#include <linux/tty.h>
+#include <linux/tty_flip.h>
+#include <linux/console.h>
+#include <asm/tc3162/tc3162.h>
+
+#define TC3162_NR_PORTS				1
+
+#define TC3162_UART_SIZE			0x30
+
+#define PORT_TC3162				3162
+
+
+#ifdef TCSUPPORT_MT7510_E1
+#define READ_OTHER(x) ((x & 0xc) + 0xbfb003a0)
+#endif
+static void tc3162ser_stop_tx(struct uart_port *port)
+{
+#ifdef TCSUPPORT_MT7510_E1
+	unsigned int tmp;
+	tmp = VPint(READ_OTHER(CR_UART_IER));
+	wmb();
+	VPchar(CR_UART_IER) &= ~IER_THRE_INTERRUPT_ENABLE;
+	wmb();
+#else
+	VPchar(CR_UART_IER) &= ~IER_THRE_INTERRUPT_ENABLE;
+#endif
+}
+
+static void tc3162ser_irq_rx(struct uart_port *port)
+{
+	struct tty_port *tty = &port->state->port;
+	unsigned int ch, flg;
+
+#ifdef TCSUPPORT_MT7510_E1
+	unsigned int tmp;
+
+	while (1) {
+		tmp = VPint(READ_OTHER(CR_UART_LSR));
+		wmb();
+		if(!(LSR_INDICATOR & LSR_RECEIVED_DATA_READY)){
+			wmb();
+			break;
+		}
+#else
+	while (LSR_INDICATOR & LSR_RECEIVED_DATA_READY) {
+#endif
+		/*
+		 * We need to read rds before reading the
+		 * character from the fifo
+		 */
+#ifdef TCSUPPORT_MT7510_E1
+		tmp = VPint(READ_OTHER(CR_UART_RBR));
+		wmb();
+		ch = VPchar(CR_UART_RBR);
+		wmb();
+#else
+		ch = VPchar(CR_UART_RBR);
+#endif
+		port->icount.rx++;
+
+		if (tty->low_latency)
+			tty_flip_buffer_push(tty);
+
+		flg = TTY_NORMAL;
+
+		tty_insert_flip_char(tty, ch, flg);
+	}
+	tty_flip_buffer_push(tty);
+}
+
+static void tc3162ser_irq_tx(struct uart_port *port)
+{
+	struct circ_buf *xmit = &port->state->xmit;
+	int count;
+
+	if (port->x_char) {
+		VPchar(CR_UART_THR) = port->x_char;
+#ifdef TCSUPPORT_MT7510_E1
+		wmb();
+#endif
+		port->icount.tx++;
+		port->x_char = 0;
+		return;
+	}
+	if (uart_circ_empty(xmit) || uart_tx_stopped(port)) {
+		tc3162ser_stop_tx(port);
+		return;
+	}
+
+	count = port->fifosize;
+	do {
+		VPchar(CR_UART_THR) =
+		    xmit->buf[xmit->tail];
+#ifdef TCSUPPORT_MT7510_E1
+		wmb();
+#endif
+		xmit->tail = (xmit->tail + 1) & (UART_XMIT_SIZE - 1);
+		port->icount.tx++;
+		if (uart_circ_empty(xmit))
+			break;
+	} while (--count > 0);
+
+	if (uart_circ_chars_pending(xmit) < WAKEUP_CHARS)
+		uart_write_wakeup(port);
+
+	if (uart_circ_empty(xmit))
+		tc3162ser_stop_tx(port);
+}
+
+static irqreturn_t tc3162ser_irq(int irq, void *dev_id)
+{
+	struct uart_port *port = dev_id;
+	uint8 iir;
+
+#ifdef TCSUPPORT_MT7510_E1
+	unsigned int tmp;
+	tmp = VPint(READ_OTHER(CR_UART_IIR));
+	wmb();
+	iir = IIR_INDICATOR;
+	wmb();
+#else
+	iir = IIR_INDICATOR;
+#endif
+	if (((iir & IIR_RECEIVED_DATA_AVAILABLE) == IIR_RECEIVED_DATA_AVAILABLE) ||
+		((iir & IIR_RECEIVER_IDLE_TRIGGER) == IIR_RECEIVER_IDLE_TRIGGER))
+		tc3162ser_irq_rx(port);
+	if ((iir & IIR_TRANSMITTED_REGISTER_EMPTY) == IIR_TRANSMITTED_REGISTER_EMPTY)
+		tc3162ser_irq_tx(port);
+
+	return IRQ_HANDLED;
+}
+
+static unsigned int tc3162ser_tx_empty(struct uart_port *port)
+{
+#ifdef TCSUPPORT_MT7510_E1
+	unsigned int tmp;
+        tmp = VPint(READ_OTHER(CR_UART_IIR));
+	wmb();
+#endif
+	unsigned int ret;
+
+        ret = (LSR_INDICATOR & LSR_THRE) ? TIOCSER_TEMT : 0;
+#ifdef TCSUPPORT_MT7510_E1
+	wmb();
+#endif
+        return ret;
+}
+
+static void tc3162ser_set_mctrl(struct uart_port *port, unsigned int mctrl)
+{
+}
+
+static unsigned int tc3162ser_get_mctrl(struct uart_port *port)
+{
+	unsigned int result = 0;
+	return result;
+}
+
+static void tc3162ser_start_tx(struct uart_port *port)
+{
+#ifdef TCSUPPORT_MT7510_E1
+        unsigned int tmp;
+        tmp = VPint(READ_OTHER(CR_UART_IER));
+	wmb();
+	VPchar(CR_UART_IER) |= IER_THRE_INTERRUPT_ENABLE;
+	wmb();
+#else
+	VPchar(CR_UART_IER) |= IER_THRE_INTERRUPT_ENABLE;
+#endif
+}
+
+static void tc3162ser_stop_rx(struct uart_port *port)
+{
+#ifdef TCSUPPORT_MT7510_E1
+        unsigned int tmp;
+        tmp = VPint(READ_OTHER(CR_UART_IER));
+	wmb();
+	VPchar(CR_UART_IER) |= IER_THRE_INTERRUPT_ENABLE;
+	wmb();
+#else
+	VPchar(CR_UART_IER) &= ~IER_RECEIVED_DATA_INTERRUPT_ENABLE;
+#endif
+}
+
+static void tc3162ser_enable_ms(struct uart_port *port)
+{
+}
+
+static void tc3162ser_break_ctl(struct uart_port *port, int break_state)
+{
+	unsigned long flags;
+
+	spin_lock_irqsave(&port->lock, flags);
+	spin_unlock_irqrestore(&port->lock, flags);
+}
+
+#if 0 // ifdef CONFIG_MIPS_TC3262
+static void tc3162ser_irq_dispatch(void)
+{
+	do_IRQ(UART_INT);
+}
+#endif
+
+static int tc3162ser_startup(struct uart_port *port)
+{
+	int ret;
+	/* Add VI handler in case the driver probed before irq
+	   config. See CONFIG_SERIAL_EARLYCON.
+
+	   I do not know what happen when set_vi_handler is
+	   called twice so I commented this. And there is
+	   prom_putchar(c) for early output. */
+#if 0 // ifdef CONFIG_MIPS_TC3262
+	if (cpu_has_vint)
+		set_vi_handler(port->irq, tc3162ser_irq_dispatch);
+#endif
+	ret = request_irq(port->irq, tc3162ser_irq, 0, "TC3162 UART", port);
+	if (ret) {
+		printk(KERN_ERR "Couldn't get irq %d ret=%d\n", port->irq, ret);
+		return ret;
+	}
+#ifdef TCSUPPORT_MT7510_E1
+	unsigned int tmp;
+	tmp = VPint(READ_OTHER(CR_UART_IER));
+	wmb();
+	VPchar(CR_UART_IER) |= IER_RECEIVED_DATA_INTERRUPT_ENABLE;
+	wmb();
+#else
+	VPchar(CR_UART_IER) |= IER_RECEIVED_DATA_INTERRUPT_ENABLE;
+#endif
+	return 0;
+}
+
+static void tc3162ser_shutdown(struct uart_port *port)
+{
+#ifdef TCSUPPORT_MT7510_E1
+        unsigned int tmp;
+        tmp = VPint(READ_OTHER(CR_UART_IER));
+	wmb();
+	VPchar(CR_UART_IER) &= ~IER_RECEIVED_DATA_INTERRUPT_ENABLE;
+	wmb();
+#else
+	VPchar(CR_UART_IER) &= ~IER_RECEIVED_DATA_INTERRUPT_ENABLE;
+#endif
+	free_irq(port->irq, port);
+}
+
+static void tc3162ser_set_termios(struct uart_port *port,
+    struct ktermios *termios, struct ktermios *old)
+{
+	unsigned int baud, quot;
+	unsigned long flags;
+
+	termios->c_cflag |= CREAD;
+
+	baud = 115200;
+	quot = uart_get_divisor(port, baud);
+
+	spin_lock_irqsave(&port->lock, flags);
+
+	/*
+	 * Update the per-port timeout.
+	 */
+	uart_update_timeout(port, termios->c_cflag, baud);
+
+	/*
+	 * Characters to ignore
+	 */
+	port->ignore_status_mask = 0;
+
+	spin_unlock_irqrestore(&port->lock, flags);
+}
+
+static const char *tc3162ser_type(struct uart_port *port)
+{
+	return port->type == PORT_TC3162 ? "TC3162" : NULL;
+}
+
+static void tc3162ser_config_port(struct uart_port *port, int flags)
+{
+	if (flags & UART_CONFIG_TYPE)
+		port->type = PORT_TC3162;
+}
+
+static void tc3162ser_release_port(struct uart_port *port)
+{
+	release_mem_region(port->iobase, TC3162_UART_SIZE);
+}
+
+static int tc3162ser_request_port(struct uart_port *port)
+{
+	return request_mem_region(port->iobase, TC3162_UART_SIZE,
+	    "tc3162-uart") != NULL ? 0 : -EBUSY;
+}
+
+static struct uart_ops tc3162ser_ops = {
+	.tx_empty =		tc3162ser_tx_empty,
+	.set_mctrl =	tc3162ser_set_mctrl,
+	.get_mctrl =	tc3162ser_get_mctrl,
+	.stop_tx =		tc3162ser_stop_tx,
+	.start_tx =		tc3162ser_start_tx,
+	.stop_rx =		tc3162ser_stop_rx,
+	.enable_ms =	tc3162ser_enable_ms,
+	.break_ctl =	tc3162ser_break_ctl,
+	.startup =		tc3162ser_startup,
+	.shutdown =		tc3162ser_shutdown,
+	.set_termios =	tc3162ser_set_termios,
+	.type =			tc3162ser_type,
+	.config_port =	tc3162ser_config_port,
+	.release_port =	tc3162ser_release_port,
+	.request_port =	tc3162ser_request_port,
+};
+
+static void tc3162_console_put(const char c)
+{
+#ifdef TCSUPPORT_MT7510_E1
+        unsigned int tmp;
+	while (1){
+		tmp = VPint(READ_OTHER(CR_UART_IER));
+		wmb();
+		if((LSR_INDICATOR & LSR_THRE)){
+			wmb();
+			break;
+		}
+	}
+	VPchar(CR_UART_THR) = c;
+	wmb();
+#else
+	while (!(LSR_INDICATOR & LSR_THRE))
+		;
+	VPchar(CR_UART_THR) = c;
+#endif
+}
+
+static void tc3162_console_write(struct console *con, const char *s,
+    unsigned int count)
+{
+	{
+		while (count--) {
+			if (*s == '\n')
+				tc3162_console_put('\r');
+			tc3162_console_put(*s);
+			s++;
+		}
+	}
+}
+
+static int tc3162_console_setup(struct console *con, char *options)
+{
+	return 0;
+}
+
+static struct uart_driver tc3162ser_reg;
+
+static struct console tc3162_serconsole = {
+	.name =		"ttyS",
+	.write =	tc3162_console_write,
+	.device =	uart_console_device,
+	.setup =	tc3162_console_setup,
+	.flags =	CON_PRINTBUFFER,
+	.cflag =	B115200 | CS8 | CREAD,
+	.index =	-1,
+	.data =		&tc3162ser_reg,
+};
+
+static int __init tc3162_console_init(void)
+{
+	register_console(&tc3162_serconsole);
+	return 0;
+}
+
+console_initcall(tc3162_console_init);
+
+static struct uart_port tc3162ser_ports[] = {
+	{
+		.iobase =	0xbfbf0003,
+		.irq =		UART_INT,
+		.uartclk =	115200,
+		.fifosize =	1,
+		.ops =		&tc3162ser_ops,
+		.line =		0,
+		.flags =	ASYNC_BOOT_AUTOCONF,
+	}
+};
+
+static struct uart_driver tc3162ser_reg = {
+	.owner	=		THIS_MODULE,
+	.driver_name =	"ttyS",
+	.dev_name =		"ttyS",
+	.major =		TTY_MAJOR,
+	.minor =		64,
+	.nr =			1,
+};
+
+
+static int __init tc3162ser_init(void)
+{
+	int ret, i;
+
+	ret = uart_register_driver(&tc3162ser_reg);
+	if (!ret) {
+		for (i = 0; i < TC3162_NR_PORTS; i++)
+			uart_add_one_port(&tc3162ser_reg, &tc3162ser_ports[i]);
+	}
+
+
+	return ret;
+}
+
+
+__initcall(tc3162ser_init);
+
